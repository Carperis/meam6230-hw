% Task 2b: Minimum distance in task space 
% This function integrates dx = J*dq to minimize Cartesian trajectory length
% You can obtain the Jacobian J at configuration q using
% J = robot.fastJacobian(q)
% USE THE SQUARE OF THE NORM FOR NUMERICAL STABILITY

% The robot arm is modeled with the following state space representation:
% - X: state vector = 4 joint angles of the robot arm
% - U(1:4): input vector = 4 joint speed
% - U(5): final time of the trajectory (constant for all timesteps), at 
% which the robot arm should reach a specified target
function cost = minimumTaskDistance(X, U, e, data, robot, target)
    %%%%%%%%%%%%%%%%%%%%%%%%%
    cost = 0;
    N = data.PredictionHorizon;
    % dt = U(end)/N;
    for n = 1:N+1
        q = X(n, :);
        dq = U(n, 1:4);
        J = robot.fastJacobian(q);
        dx = J * transpose(dq);
        cost = cost + norm(dx)^2;
    end
    dx = target - J * transpose(X(end, :));
    cost = cost + norm
    %%%%%%%%%%%%%%%%%%%%%%%%%
end
